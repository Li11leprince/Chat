import SwiftUI
import OrderedCollections

struct Message: Identifiable, Hashable {
    let id = UUID()
    let text: String
    let isUser: Bool
    let timestamp: Date // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
    
    static var mock: [Message] = {
        var messages: [Message] = []
        for i in 1...300 {
            let messageText = "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä \(i)"
            let message = Message(text: messageText, isUser: i % 2 == 0, timestamp: Date().addingTimeInterval(-Double(i * 60 * 60)))
            messages.append(message)
        }
        return messages
    }()
}

struct ChatView: View {
    @State private var messages: OrderedSet<Message> = []
    @State private var newMessage: String = ""
    @State private var searchText: String = ""
    @State private var foundMessageID: UUID?
    @State private var currentTimestamp: Date? // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    var body: some View {
        VStack {
            // Search bar
            HStack {
                TextField("–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è", text: $searchText)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .frame(height: 40)
                Button(action: searchMessageOnServer) {
                    Text("–ü–æ–∏—Å–∫")
                        .padding(.horizontal)
                }
                .disabled(searchText.isEmpty)
            }
            .padding()

            // Chat messages list
            ScrollViewReader { scrollViewProxy in
                ScrollView {
                    VStack(spacing: 10) {
                        ForEach(messages) { message in
                            MessageRow(message: message)
                                .id(message.id) // –£–∫–∞–∑—ã–≤–∞–µ–º ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        }
                    }
                    .padding()
                    .onAppear {
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –¥–æ—à–ª–∏ –¥–æ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                        if let firstMessage = messages.first {
                            if let currentTimestamp = currentTimestamp, currentTimestamp > firstMessage.timestamp {
                                loadPreviousMessages()
                            }
                        }
                    }

                }
            }

            // Input field for new messages
            HStack {
                TextField("–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ...", text: $newMessage)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .frame(minHeight: 30)
                
                Button(action: sendMessage) {
                    Text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
                        .padding(.horizontal)
                }
                .disabled(newMessage.isEmpty)
            }
            .padding()
        }
        .onAppear(perform: loadInitialMessages)
    }
    
    // Simulate sending a new message
    func sendMessage() {
        let newMessageObject = Message(text: newMessage, isUser: true, timestamp: Date())
        messages.append(newMessageObject)
        newMessage = ""
    }

    // Simulate search on the server
    func searchMessageOnServer() {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        DispatchQueue.global().asyncAfter(deadline: .now() + 1.0) {
            // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
            let foundMessage = Message(text: "–ù–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", isUser: false, timestamp: Date().addingTimeInterval(-60*60*24*30)) // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            let adjacentMessages = [
                Message(text: "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ", isUser: false, timestamp: foundMessage.timestamp.addingTimeInterval(-60*60)),
                Message(text: "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ", isUser: true, timestamp: foundMessage.timestamp.addingTimeInterval(60*60))
            ]
            
            DispatchQueue.main.async {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
                messages.append(contentsOf: adjacentMessages)
                messages.append(foundMessage)
                
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                foundMessageID = foundMessage.id
            }
        }
    }
    
    // Simulate loading previous messages from the server
    func loadPreviousMessages() {
        DispatchQueue.global().asyncAfter(deadline: .now() + 1.0) {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            let previousMessages = [
                Message(text: "–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 1", isUser: false, timestamp: Date().addingTimeInterval(-60*60*24*40)),
                Message(text: "–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 2", isUser: false, timestamp: Date().addingTimeInterval(-60*60*24*35))
            ]
            
            DispatchQueue.main.async {
                // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
                messages.append(contentsOf: previousMessages)
            }
        }
    }

    // Load initial messages
    func loadInitialMessages() {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        messages.append(contentsOf: (Message.mock.reversed()[0...20]).reversed())
        currentTimestamp = messages.last?.timestamp
        let reactions = ["üëç", "‚ù§Ô∏è", "üòÇ", "üòÆ", "üò¢"]
        for emoji in reactions {
            print(emoji)
        }
    }
}

struct MessageRow: View {
    let message: Message
    
    var body: some View {
        HStack {
            if message.isUser {
                Spacer()
            }
            VStack(alignment: .leading) {
                Text(message.text)
                    .padding()
                    .background(message.isUser ? Color.blue : Color.gray.opacity(0.2))
                    .foregroundColor(message.isUser ? Color.white : Color.black)
                    .cornerRadius(10)
                Text("\(message.timestamp, formatter: dateFormatter)")
                    .font(.caption)
                    .foregroundColor(.gray)
            }
            if !message.isUser {
                Spacer()
            }
        }
        .frame(maxWidth: .infinity, alignment: message.isUser ? .trailing : .leading)
    }
}

let dateFormatter: DateFormatter = {
    let formatter = DateFormatter()
    formatter.dateStyle = .short
    formatter.timeStyle = .short
    return formatter
}()

struct ChatView_Previews: PreviewProvider {
    static var previews: some View {
        ChatView()
    }
}
